'use client';
import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import {
  useGetProfileInfoQuery,
  useUpdateMutation,
  useLogoutMutation,
} from '@/redux/slice/userApiSlice';
import { toast } from 'react-toastify';

const ProfilePage: React.FC = () => {
  const router = useRouter();

  const {
    data,
    error: getProfileError,
    isLoading: isProfileLoading,
  } = useGetProfileInfoQuery(undefined);

  const [updateProfile, { error: updateProfileError }] = useUpdateMutation();

  const [formData, setFormData] = useState({
    name: '',
    email: '',
    password: '',
  });

  useEffect(() => {
    if (data) {
      setFormData({
        name: data.userInfo.name,
        email: data.userInfo.email,
        password: '',
      });
    } else if (getProfileError) {
      toast.error(getProfileError?.data?.error.message);
      router.push('/login');
    }
  }, [data, getProfileError]);

  useEffect(() => {
    console.log(updateProfileError);
  }, [updateProfile, updateProfileError]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData((prevFormData) => ({
      ...prevFormData,
      [name]: value,
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await updateProfile(formData).unwrap();
      toast.success('Profile updated successfully!');
    } catch (error) {
      if (error) {
        if (
          error.data &&
          Array.isArray(error.data.errors) &&
          error.data.errors.length > 0
        ) {
          console.error('Failed to update profile:', error.data.errors[0].msg);
          toast.error(error.data.errors[0].msg || 'Failed to update profile', {
            autoClose: false,
          });
        } else if (updateProfileError) {
          console.error(
            'Failed to update profile:',
            updateProfileError.message
          );
          toast.error(
            updateProfileError.message || 'Failed to update profile',
            {
              autoClose: false,
            }
          );
        } else {
          console.error(
            'Failed to update profile:',
            error.message || 'Unknown error occurred'
          );
          toast.error(error.message || 'Failed to update profile', {
            autoClose: false,
          });
        }
      }
    }
  };

  if (isProfileLoading) return <div>Loading...</div>;

  return (
    <div className="max-w-md mx-auto mt-10 p-6 bg-white shadow-md rounded-md">
      <h1 className="text-2xl font-bold mb-4">Profile Information</h1>
      {getProfileError && getProfileError.status !== 200 && (
        <div className="mb-4 text-red-500">
          Failed to fetch profile: {getProfileError.message || 'Unknown error'}
        </div>
      )}
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label
            htmlFor="name"
            className="block text-sm font-medium text-gray-700"
          >
            Name:
          </label>
          <input
            type="text"
            id="name"
            name="name"
            value={formData.name}
            onChange={handleChange}
            required
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          />
        </div>
        <div>
          <label
            htmlFor="email"
            className="block text-sm font-medium text-gray-700"
          >
            Email:
          </label>
          <input
            type="email"
            id="email"
            name="email"
            value={formData.email}
            onChange={handleChange}
            required
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          />
        </div>
        <div>
          <label
            htmlFor="password"
            className="block text-sm font-medium text-gray-700"
          >
            Password:
          </label>
          <input
            type="password"
            id="password"
            name="password"
            value={formData.password}
            onChange={handleChange}
            required
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
          />
        </div>
        {updateProfileError && (
          <div className="mb-4 text-red-500">
            Failed to update profile:{' '}
            {updateProfileError.message || 'Unknown error'}
          </div>
        )}
        <button
          type="submit"
          className="w-full bg-indigo-600 text-white py-2 px-4 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-opacity-50"
        >
          Update Profile
        </button>
      </form>
    </div>
  );
};

export default ProfilePage;
